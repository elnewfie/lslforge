# This file adapted from a generated one -- see https://github.com/hvr/multi-ghc-travis
language: c
sudo: false

cache:
  directories:
    - $HOME/.cabsnap
    - $HOME/.cabal/packages
    - $HOME/.stack

before_cache:
  - rm -fv $HOME/.cabal/packages/hackage.haskell.org/build-reports.log
  - rm -fv $HOME/.cabal/packages/hackage.haskell.org/00-index.tar

env:
  global:
    LSLFORGE_TEST_DATA=$TRAVIS_BUILD_DIR/lslforge/testing/data

matrix:
  include:
    - env: BUILD=cabal CABALVER=1.24 GHCVER=8.0.2
      compiler: ": #GHC 8.0.2"
      addons: {apt: {packages: [cabal-install-1.24,ghc-8.0.2], sources: [hvr-ghc]}}

    - env: BUILD=stack ARGS="--no-terminal --resolver lts-8.2"
      compiler: ": #stack 8.0.2 osx"
      os: osx

before_install:
  - unset CC
  - export PATH=$HOME/.local/bin:/opt/ghc/$GHCVER/bin:/opt/cabal/$CABALVER/bin:$PATH

  # Download and unpack the stack executable
  - |
    if [[ $BUILD == "stack" ]]; then
      mkdir -p ~/.local/bin
      if [ `uname` = "Darwin" ]
      then
        curl --insecure -L https://www.stackage.org/stack/osx-x86_64 | tar xz --strip-components=1 --include '*/stack' -C ~/.local/bin
      else
        curl -L https://www.stackage.org/stack/linux-x86_64 | tar xz --wildcards --strip-components=1 -C ~/.local/bin '*/stack'
      fi
    fi

  # change to haskell project subdir
  - cd lslforge/haskell

install:
  - if [ -f configure.ac ]; then autoreconf -i; fi
  - |
    case "$BUILD" in
      stack)
        stack --install-ghc $ARGS install --only-dependencies
        ;;
      cabal)
        cabal --version
        echo "$(ghc --version) [$(ghc --print-project-git-commit-id 2> /dev/null || echo '?')]"
        if [ -f $HOME/.cabal/packages/hackage.haskell.org/00-index.tar.gz ];
        then
          zcat $HOME/.cabal/packages/hackage.haskell.org/00-index.tar.gz > \
               $HOME/.cabal/packages/hackage.haskell.org/00-index.tar;
        fi
        travis_retry cabal update -v
        sed -i 's/^jobs:/-- jobs:/' ${HOME}/.cabal/config
        cabal install --only-dependencies --enable-tests --enable-benchmarks --dry -v > installplan.txt
        sed -i -e '1,/^Resolving /d' installplan.txt; cat installplan.txt

        # check whether current requested install-plan matches cached package-db snapshot
        if diff -u $HOME/.cabsnap/installplan.txt installplan.txt;
        then
          echo "cabal build-cache HIT";
          rm -rfv .ghc;
          cp -a $HOME/.cabsnap/ghc $HOME/.ghc;
          cp -a $HOME/.cabsnap/lib $HOME/.cabsnap/share $HOME/.cabsnap/bin $HOME/.cabal/;
        else
          echo "cabal build-cache MISS";
          rm -rf $HOME/.cabsnap;
          mkdir -p $HOME/.ghc $HOME/.cabal/lib $HOME/.cabal/share $HOME/.cabal/bin;
          cabal install --only-dependencies --enable-tests --enable-benchmarks;
        fi

        # snapshot package-db on cache miss
        if [ ! -d $HOME/.cabsnap ];
        then
          echo "snapshotting package-db to build-cache";
          mkdir $HOME/.cabsnap;
          cp -a $HOME/.ghc $HOME/.cabsnap/ghc;
          cp -a $HOME/.cabal/lib $HOME/.cabal/share $HOME/.cabal/bin installplan.txt $HOME/.cabsnap/;
        fi
        ;;
    esac

# Here starts the actual work to be performed for the package under test;
# any command which exits with a non-zero exit code causes the build to fail.
script:
  - |
    case "$BUILD" in
      stack)
        stack $ARGS test
        stack install LSLForge
        ;;
      cabal)
        cabal configure --enable-tests -v2  # -v2 provides useful information for debugging
        cabal build   # this builds all libraries and executables (including tests/benchmarks)
        cabal test # test LSLForge
        ;;
    esac
